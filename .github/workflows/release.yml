name: Release Management

on:
  push:
    branches: [master]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:ci

      - name: Build project
        run: npm run build

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Determine version bump based on commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            # No previous tags, this is the first release
            NEW_VERSION="0.5.0"
            BUMP_TYPE="minor"
          else
            # Get commits since last tag
            COMMITS=$(git log --pretty=format:"%s" $LAST_TAG..HEAD)
            
            if echo "$COMMITS" | grep -q "^feat\|^BREAKING CHANGE"; then
              # Minor version bump for features
              NEW_VERSION=$(npm version minor --no-git-tag-version | sed 's/v//')
            elif echo "$COMMITS" | grep -q "^fix\|^perf"; then
              # Patch version bump for fixes
              NEW_VERSION=$(npm version patch --no-git-tag-version | sed 's/v//')
            else
              # Patch version bump for other changes
              NEW_VERSION=$(npm version patch --no-git-tag-version | sed 's/v//')
            fi
            
            # Reset package.json since we only wanted to calculate version
            git checkout package.json
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Next version will be: $NEW_VERSION"

      - name: Update version and create tag
        if: steps.version.outputs.new_version != steps.version.outputs.current_version
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Update package.json version
          npm version $NEW_VERSION --no-git-tag-version

          # Commit version bump
          git add package.json
          git commit -m "chore: Release version $NEW_VERSION"

          # Create and push tag
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin master
          git push origin "v$NEW_VERSION"

      - name: Create GitHub Release
        if: steps.version.outputs.new_version != steps.version.outputs.current_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Generate release notes from commits
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            RELEASE_NOTES="Initial release of the Project Context MCP Server"
          else
            RELEASE_NOTES=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD~1)
          fi

          # Create release
          gh release create "v$NEW_VERSION" \
            --title "Release v$NEW_VERSION" \
            --notes "$RELEASE_NOTES" \
            --latest

      - name: Upload Release Assets
        if: steps.version.outputs.new_version != steps.version.outputs.current_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Create distribution package
          npm pack

          # Upload package to release
          gh release upload "v$NEW_VERSION" *.tgz
